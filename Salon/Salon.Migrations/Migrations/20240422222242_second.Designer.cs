// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Salon.Migrations;

#nullable disable

namespace Salon.Migrations.Migrations
{
    [DbContext(typeof(SalonContext))]
    [Migration("20240422222242_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Salon.Model.Models.Appoinment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppoinmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserLoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserLoginId");

                    b.ToTable("Appoinment");
                });

            modelBuilder.Entity("Salon.Model.Models.SalonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Salon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address 1",
                            Description = "Welcome to Serene Haven Salon & Spa, where tranquility meets transformation. Nestled in the heart of Craiova, our haven offers a serene escape from the hustle and bustle of everyday life. Step into our luxurious sanctuary and embark on a journey of self-care and rejuvenation.\r\n\r\nOur team of skilled professionals is dedicated to providing unparalleled service tailored to your unique needs. Whether you're craving a glamorous makeover, a relaxing massage, or a rejuvenating facial, we have a wide range of services to pamper you from head to toe.",
                            ImagePath = "salon1.jpg",
                            Name = "Serene Haven Salon & Spa"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address 2",
                            Description = "Description 2",
                            ImagePath = "salon1.jpg",
                            Name = "Beauty Salon 2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address 3",
                            Description = "Description 3",
                            ImagePath = "salon1.jpg",
                            Name = "Beauty Salon 3"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Address 4",
                            Description = "Description 4",
                            ImagePath = "salon1.jpg",
                            Name = "Beauty Salon 4"
                        });
                });

            modelBuilder.Entity("Salon.Model.Models.SalonService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description nails",
                            Name = "Gel Nails",
                            SalonId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Descriptions hair",
                            Name = "Hair Treatment",
                            SalonId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description hair",
                            Name = "Haircut",
                            SalonId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description facials",
                            Name = "Gel Nails",
                            SalonId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Relax and unwind with our signature massage, tailored to soothe muscles and promote deep relaxation.",
                            Name = "Serenity Signature Massage",
                            SalonId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Revive your skin's natural glow with our customized facial, leaving you with a luminous complexion",
                            Name = "Radiance Renewal Facial",
                            SalonId = 1
                        });
                });

            modelBuilder.Entity("Salon.Model.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserLoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserLoginId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("Salon.Model.Models.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Salon.Model.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserLoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserLoginId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Salon.Model.Models.Appoinment", b =>
                {
                    b.HasOne("Salon.Model.Models.SalonService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Salon.Model.Models.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Salon.Model.Models.SalonService", b =>
                {
                    b.HasOne("Salon.Model.Models.SalonModel", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("Salon.Model.Models.UserAddress", b =>
                {
                    b.HasOne("Salon.Model.Models.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Salon.Model.Models.UserProfile", b =>
                {
                    b.HasOne("Salon.Model.Models.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogin");
                });
#pragma warning restore 612, 618
        }
    }
}
